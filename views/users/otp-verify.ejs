<!-- views/signup.ejs -->
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>
        <%= title %>
    </title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        .signup-container {
            max-width: 500px;
            margin: 2rem auto;
            padding: 2rem;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            border-radius: 8px;
        }

        .invalid-feedback {
            display: block;
            color: #dc3545;
            font-size: 0.875em;
            margin-top: 0.25rem;

        }

        .form-control.is-invalid {
            border-color: #dc3545;
            padding-right: calc(1.5em + 0.75rem);
            background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 12 12' width='12' height='12' fill='none' stroke='%23dc3545'%3e%3ccircle cx='6' cy='6' r='4.5'/%3e%3cpath stroke-linejoin='round' d='M5.8 3.6h.4L6 6.5z'/%3e%3ccircle cx='6' cy='8.2' r='.6' fill='%23dc3545' stroke='none'/%3e%3c/svg%3e");
            background-repeat: no-repeat;
            background-position: right calc(0.375em + 0.1875rem) center;
            background-size: calc(0.75em + 0.375rem) calc(0.75em + 0.375rem);
        }

        .verification-container {
            max-width: 400px;
            margin: 2rem auto;
            padding: 2rem;
            border-radius: 8px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            background-color: white;
        }

        #otp {
            letter-spacing: 0.5em;
            font-size: 1.5em;
        }
    </style>
</head>

<body>

  
    <div class="container">
        <div class="verification-container">
            <h2 class="text-center mb-4">Verify Your Email</h2>
    
            <div class="text-center mb-4">
                <p>We've sent a verification code to:</p>
                <p class="fw-bold"><%= locals.email %></p>
            </div>
    
            <div class="mt-3">
                <p>Time remaining: <span id="timer" class="fw-bold text-primary">60 seconds</span></p>
            </div>
    
            <form id="otpForm">
                <div class="mb-4">
                    <label for="otp" class="form-label">Enter Verification Code</label>
                    <input type="text" class="form-control text-center form-control-lg" id="otp" name="otp" maxlength="6" placeholder="Enter 6-digit code" required autofocus>
                </div>
                <button type="submit" class="btn btn-primary w-100 mb-3">Verify Email</button>
            </form>
           
            <div id="generalError" class="error-message" style="display: none; color: red;"></div>

            <div class="text-center">
                <p>Didn't receive the code?</p>
                <form id="resendForm">
                    <button type="submit" id="resendButton" class="btn btn-link" disabled>Resend Code</button>
                </form>
            </div>
        </div>
    </div>
    


   
    <script>
        document.addEventListener("DOMContentLoaded", () => {
    let timeLeft = 10;  
    const timerDisplay = document.getElementById('timer');
    const resendButton = document.getElementById('resendButton');
    let timerId = null;

    
    function startTimer() {
        resendButton.disabled = true;  
        timerDisplay.innerHTML = `${timeLeft} seconds`;

        if (timerId) clearInterval(timerId);

        timerId = setInterval(() => {
            timeLeft--;

            if (timeLeft <= 0) {
                clearInterval(timerId);
                timerDisplay.innerHTML = "Timer expired";
                resendButton.disabled = false;  
                return;
            }

            
            timerDisplay.innerHTML = `${timeLeft} seconds`;
        }, 1000);
    }

    
    startTimer();

    
    document.getElementById("resendForm").addEventListener("submit", async (e) => {
        e.preventDefault();

        
        if (!resendButton.disabled) {
            try {
                const response = await fetch("/users/otp-verify/resendOtp", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                  
                });
                console.log(response);
                const data = await response.json();
                console.log(data);
                if (response.ok) {
                    Swal.fire({
                        icon: 'success',
                        title: 'OTP Resent',
                        text: 'A new verification code has been sent to your email!',
                        confirmButtonText: 'OK'
                    });
                    timeLeft = 60;  
                    startTimer();  
                } else {

                    throw new Error(data.errors?.general || "Could not resend OTP");
                }
            } catch (error) {
                console.error("Error resending OTP:", error);
                Swal.fire({
                    icon: 'error',
                    title: 'Resend OTP Failed',
                    text: 'Could not resend OTP. Please try again.',
                    confirmButtonText: 'OK'
                });
            }
        }
    });

      // Handle OTP verification submission
      document.getElementById("otpForm").addEventListener("submit", async (e) => {
        e.preventDefault();

        const otpInput = document.getElementById("otp");
        const otpValue = otpInput.value;
        console.log(otpValue)

        // Frontend validation for OTP input format
        if (!/^\d{6}$/.test(otpValue)) {
            displayError("otpError", "Please enter a valid 6-digit OTP.");
            return;
        }
        console.log("no error occuring before fetch trigger")

        try {
            console.log("reached near to fetch")
            const response = await fetch("/users/otp-verify", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify({ otp: otpValue })
            });

            const data = await response.json();
             console.log(data)
            if (data.success) {
                console.log(response)
                // Redirect to home page upon successful verification
                window.location.href = "/users/home";
            } else {
                // Show specific error messages based on server response
              
                if (data.errors) {
                    if (data.errors.otp) {
                        displayError("otpError", data.errors.otp);
                    } else if (data.errors.general) {
                        displayError("generalError", data.errors.general);
                    }
              
                }
            }
        } catch (error) {
            console.error("Error during OTP verification:", error);
            displayError("generalError", "Something went wrong. Please try again this error from fetch.");
        }
    });

});

// Function to display error messages on the page
function displayError(elementId, message) {
    const errorElement = document.getElementById(elementId);
    if (errorElement) {
        errorElement.innerText = message;
        errorElement.style.display = "block";
    }
}

    </script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
</body>

</html>