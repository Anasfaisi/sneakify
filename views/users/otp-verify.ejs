<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">

    <link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css">
    <link rel="stylesheet" href="/stylesheets/otp-verify.css">
    
  </head>
  <body>

<div class="container">
  <div class="verification-container">
    <h2 class="text-center mb-4">Verify Your Email</h2>

    <div class="text-center mb-4">
      <p>We've sent a verification code to:</p>
      <p class="fw-bold"><%= email %></p>
    </div>

    
    <div id="generalError" class="error-message text-danger text-center alert alert-danger mt-3" style="display: none;"></div>

    <form id="otpForm">
      <div class="grid-box-container">
        <input type="text" maxlength="1" class="grid-box" id="otp1" required autofocus>
        <input type="text" maxlength="1" class="grid-box" id="otp2" required>
        <input type="text" maxlength="1" class="grid-box" id="otp3" required>
        <input type="text" maxlength="1" class="grid-box" id="otp4" required>
        <input type="text" maxlength="1" class="grid-box" id="otp5" required>
        <input type="text" maxlength="1" class="grid-box" id="otp6" required>
      </div>
      <button type="submit" class="btn btn-primary w-100 mt-4">Verify Email</button>
    </form>
    <div class="text-center mb-4">
      <p>Time remaining: <span id="timer" class="timer text-se"> seconds</span></p>
    </div>

    <div class="text-center mt-3">
      <p>Didn't receive the code?</p>
      <form id="resendForm">
        <button type="submit" id="resendButton" class="btn btn-link" disabled>Resend Code</button>
      </form>
    </div>
  </div>
</div>



<script>
  //otp box layout
  document.addEventListener("DOMContentLoaded", () => {
    const gridBoxes = document.querySelectorAll(".grid-box");

    gridBoxes.forEach((box, index) => {
      box.addEventListener("input", () => {
        if (!isNaN(box.value) && box.value.length === 1) {
          const nextBox = gridBoxes[index + 1];
          if (nextBox) nextBox.focus();
        } else {
          box.value = ""; // Clear invalid input
        }
      });

      box.addEventListener("keydown", (e) => {
        if (e.key === "Backspace" && box.value === "" && index > 0) {
          gridBoxes[index - 1].focus();
        }
      });

      box.addEventListener("paste", (e) => {
        e.preventDefault();
        const pastedData = e.clipboardData.getData("text").slice(0, gridBoxes.length);
        pastedData.split("").forEach((char, i) => {
          if (!isNaN(char) && gridBoxes[index + i]) {
            gridBoxes[index + i].value = char;
          }
        });
      });
    });

  })
</script>

<script>
  // OTP Timer
  document.addEventListener("DOMContentLoaded", () => {
    const otpExpiry = new Date("<%= otpExpiry %>").getTime();
    const timerDisplay = document.getElementById("timer");
    const resendButton = document.getElementById("resendButton");

    // Initial timeLeft calculation
    let timeLeft = Math.max(0, Math.floor((otpExpiry - Date.now()) / 1000));
    let timerId = null;

    function startTimer() {
      resendButton.disabled = true;

      // Display the initial time in seconds
      timerDisplay.textContent = `${timeLeft} seconds`;

      // Start the interval
      timerId = setInterval(() => {
        // Dynamically calculate the current time and update timeLeft
        timeLeft = Math.max(0, Math.floor((otpExpiry - Date.now()) / 1000));

        if (timeLeft <= 0) {
          clearInterval(timerId);
          timerDisplay.textContent = "Timer expired";
          timerDisplay.style.color ="red";
          resendButton.disabled = false;
          return;
        }

        timerDisplay.textContent = `${timeLeft} seconds`;
      }, 1000);
    }

    startTimer();


  });




</script>


<script>
  document.getElementById("otpForm").addEventListener("submit", async (e) => {
    e.preventDefault();
    const gridBoxes = document.querySelectorAll(".grid-box");


    let otpValue = "";
    gridBoxes.forEach((box) => {
      otpValue += box.value.trim();
    });

    if (otpValue.length !== gridBoxes.length) {
      displayError("generalError", "Please enter the complete OTP.");
      return;
    }

    // Frontend validation for OTP input format
    if (!/^\d{6}$/.test(otpValue)) {
      displayError("otpError", "Please enter a valid 6-digit OTP.");
      return;
    }
    console.log("no error occuring before fetch trigger")

    try {
      const response = await fetch("/users/otp-verify", {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify({
          otp: otpValue
        })
      });

      const data = await response.json();
      console.log(data)
      if (response.ok) {
        console.log(response)
        window.location.href = "/users/home";
      } else {
        displayError("generalError", data.message);
      }
    } catch (error) {
      console.log("Error during OTP verification:", error);
      displayError("generalError", "Something went wrong. Please try again this error from fetch.");
    }
  });
</script>



<script>

  //resend otp
  document.getElementById("resendForm").addEventListener("submit", async (e) => {
    e.preventDefault();


    if (!resendButton.disabled) {
      try {
        const response = await fetch("/users/otp-verify/resendOtp", {
          method: "POST",
          headers: {
            "Content-Type": "application/json"
          },

        });
        const data = await response.json();
        if (response.ok) {
          Swal.fire({
            icon: 'success',
            title: 'OTP Resent',
            text: 'A new verification code has been sent to your email!',
            confirmButtonText: 'OK'
          });
          setTimeout(() => {
          window.location.href ="/users/otp-verify"
          }, 1500);
      
          
        } else {

          throw new Error(data.errors?.general || "Could not resend OTP");
        }
      } catch (error) {
        console.error("Error resending OTP:", error);
        Swal.fire({
          icon: 'error',
          title: 'Resend OTP Failed',
          text: 'Could not resend OTP. Please try again.',
          confirmButtonText: 'OK'
        });
      }
    }
  });


</script>

<script>  
  // Function to display error messages on the page
  function displayError(elementId, message) {
    const errorElement = document.getElementById(elementId);
    if (errorElement) {
      errorElement.innerText = message;
      errorElement.style.display = "block";
    }
  }
</script>
<%- include("partials/footer") %>