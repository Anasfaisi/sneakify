<%- include("partials/header") %>



<div class="container mt-5">
  <nav aria-label="breadcrumb">
    <ol class="breadcrumb">
      <li class="breadcrumb-item"><a href="/">Home</a></li>
      <li class="breadcrumb-item"><a href="/users/profile">profile</a></li>
      <li class="breadcrumb-item"><a href="/users/orders">orders</a></li>
      <li class="breadcrumb-item"><a href="/users/orders/<%=order.orderId %>"><%=order.orderId %></a></li>
      
    </ol>
  </nav>
  <div class="row">
    <!-- Sidebar -->
    <div class="col-md-3">
      <%- include('partials/profileSidebar') %>
    </div>

    <!-- Order Details Section -->
    <div class="col-md-9">
      <div class="card">
        <div class="card-header text-center bg-primary text-white">
          <h3>Order Details</h3>
        </div>
        <div class="card-body">
          <h5 class="mb-3">Order ID: <%= order.orderId %></h5>
          <p><strong>Date:</strong> <%= new Date(order.orderDate).toLocaleDateString() %></p>
          <p><strong>Time:</strong> <%= new Date(order.orderDate).toLocaleTimeString() %></p>

          <h6>Items:</h6>
          <ul>
            <% order.products.forEach(item => { %>
            <li>
              <strong><%= item.name %></strong> (Qty: <%= item.quantity %>) - <%= item.price %> each
              <br><small><%= item.description %></small>
            </li>
            <% }) %>
          </ul>

          <h6>Total Price: <%= order.grandTotal %></h6>
          <p><strong>Status:</strong> <%= order.status %></p>

          <!-- Payment Status -->
          <p><strong>Payment Mode:</strong> <%= order.paymentMethod %></p>
          <p><strong>Payment Status:</strong> <%= order.paymentStatus %></p>

          <!-- Shipping Details -->
          <h6>Shipping Details:</h6>
          <p><strong>Address:</strong> <%= order.addressDetails.address %>, <%= order.addressDetails.city %>, <%= order.addressDetails.state %>, <%= order.addressDetails.country %> - <%= order.addressDetails.pincode %></p>
          <p><strong>Shipping Method:</strong> Standard Shipping</p>
          <p><strong>Estimated Delivery:</strong> <%= new Date(new Date(order.orderDate).setDate(new Date(order.orderDate).getDate() + 5)).toLocaleDateString() %></p>

          <!-- Conditional Cancel Button -->
          <% if (order.status === 'pending') { %>
          <!-- Trigger Button -->
          <button type="button" class="btn btn-warning" data-bs-toggle="modal" data-bs-target="#cancelOrderModal" id="cancelOrderButton" data-order-id="<%= order._id %>">
            Cancel Order
          </button>
          <% } else if (order.status === 'shipped') { %>
          <p style="color: rgba(255, 98, 0, 0.819);">Cannot cancel order since order already shipped.</p>
          <% } else if (order.status === 'delivered') { %>
          <button id="returnOrderButton" class="btn btn-secondary" data-order-id="<%= order._id %>" data-bs-toggle="modal" data-bs-target="#returnOrderModal">Return Order</button>
          <button id="downloadInvoiceButton" class="btn btn-outline-primary ">Download Invoice</button>

          <% } else if (order.status === 'cancelled') { %>
          <p style="color: red;">This order has cancelled.</p>
          <% } else if (order.status === 'return_requested') { %>
          <p style="color: orange;">return requested. Waiting for admin approval.</p>
          <% } else if (order.status === 'returned') { %>
          <p style="color: red;">This order has returned.</p>
         
          <% } else if (order.paymentStatus === "failed") { %>
            <button id="retryPayment" class="btn btn-primary ">Retry Payment</button>
          <% } %>

        </div>
      </div>
    </div>
  </div>
</div>

<!-- Cancel Order Modal -->
<div class="modal fade" id="cancelOrderModal" tabindex="-1" aria-labelledby="cancelOrderModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="cancelOrderModalLabel">Cancel Order</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <form id="cancelOrderForm">
          <div class="mb-3">
            <label for="reasonInput" class="form-label">Reason for Canceling</label>
            <textarea class="form-control" id="reasonInput" name="reason" rows="4" placeholder="Write your reason here..."></textarea>
          </div>
          <div class="mb-3 text-danger" id="errorMessage" style="display: none;">
            Please provide a reason for cancellation.
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
        <button type="button" class="btn btn-danger" id="submitReason">Submit</button>
      </div>
    </div>
  </div>
</div>


<!-- Return Order Modal -->
<div class="modal fade" id="returnOrderModal" tabindex="-1" aria-labelledby="returnOrderLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <form id="returnOrderForm">
        <div class="modal-header">
          <h5 class="modal-title" id="returnOrderLabel">Return Order</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <div class="mb-3">
            <label for="returnReasonInput" class="form-label">Reason for Return</label>
            <textarea class="form-control" id="returnReasonInput" rows="3" placeholder="Enter your reason"></textarea>
            <div id="returnErrorMessage" class="text-danger mt-2" style="display: none;">Please provide a reason for returning the order.</div>
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
          <button type="button" id="submitReturnReason" class="btn btn-primary">Submit</button>
        </div>
      </form>
    </div>
  </div>
</div>

<script>
  document.getElementById('downloadInvoiceButton').addEventListener('click', function() {
    const orderId = '<%= order._id %>'; // The order ID from EJS
    // Trigger the download of the invoice PDF
    window.location.href = `/users/invoiceDownload/${orderId}`; // This will call the backend route to generate and download the PDF
});
</script>
<script>
  document.getElementById("submitReason").addEventListener("click", async function () {
    const reasonInput = document.getElementById("reasonInput").value.trim();
    const errorMessage = document.getElementById("errorMessage");

    // Validate input
    if (reasonInput === "") {
      // Show error message if no reason is provided
      errorMessage.style.display = "block";
      return;
    } else {
      errorMessage.style.display = "none";
    }

    // Ask for confirmation
    const result = await Swal.fire({
      title: "Confirm Cancellation",
      text: "Are you sure you want to cancel the order with this reason?",
      icon: "warning",
      showCancelButton: true,
      confirmButtonText: "Yes, Cancel It",
      cancelButtonText: "No, Keep It",
    });

    if (result.isConfirmed) {
      // If the user confirms, trigger the API call
      try {
        // Fetch order ID from the cancel button
        const cancelOrderButton = document.getElementById("cancelOrderButton");
        const orderId = cancelOrderButton.getAttribute("data-order-id");

        if (!orderId) {
          Swal.fire({
            icon: "error",
            title: "Error",
            text: "Order ID not found.",
          });
          return;
        }

        // Call the API
        const response = await fetch(`/users/orderCancel/${orderId}`, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ reason: reasonInput }),
        });

        const data = await response.json();

        // Handle response
        if (response.ok) {
          Swal.fire({
            icon: "success",
            title: "Order Cancelled",
            text: data.message,
          }).then(() => {
            window.location.href = `/users/orderDetails/${orderId}`;
          });
        } else {
          Swal.fire({
            icon: "error",
            title: "Error",
            text: data.message || "Failed to cancel the order.",
          });
        }
      } catch (error) {
        console.error("Error canceling the order:", error);
        Swal.fire({
          icon: "error",
          title: "Error",
          text: "An unexpected error occurred while canceling the order.",
        });
      }

      // Close the modal
      const modal = bootstrap.Modal.getInstance(document.getElementById("cancelOrderModal"));
      modal.hide();

      // Clear the input field
      document.getElementById("cancelOrderForm").reset();
    } else {
      console.log("User canceled the cancellation.");
    }
  });
</script>





 <script>
  document.getElementById("submitReturnReason").addEventListener("click", async function () {
    const reasonInput = document.getElementById("returnReasonInput").value.trim();
    const errorMessage = document.getElementById("returnErrorMessage");

    // Validate input
    if (reasonInput === "") {
      // Show error message if no reason is provided
      errorMessage.style.display = "block";
      return;
    } else {
      errorMessage.style.display = "none";
    }

    // Ask for confirmation
    const result = await Swal.fire({
      title: "Confirm Return",
      text: "Are you sure you want to return the order with this reason?",
      icon: "warning",
      showCancelButton: true,
      confirmButtonText: "Yes, Return It",
      cancelButtonText: "No, Keep It",
    });

    if (result.isConfirmed) {
      // If the user confirms, trigger the API call
      try {
        // Fetch order ID from the return button
        const returnOrderButton = document.getElementById("returnOrderButton");
        const orderId = returnOrderButton.getAttribute("data-order-id");

        if (!orderId) {
          Swal.fire({
            icon: "error",
            title: "Error",
            text: "Order ID not found.",
          });
          return;
        }

        // Call the API
        const response = await fetch(`/users/orderReturn/${orderId}`, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ reason: reasonInput }),
        });

        const data = await response.json();

        // Handle response
        if (response.ok) {
          Swal.fire({
            icon: "success",
            title: "Request succesfull",
            text: data.message,
          }).then(() => {
            window.location.href = `/users/orderDetails/${orderId}`;
          });
        } else {
          Swal.fire({
            icon: "error",
            title: "Error",
            text: data.message || "Failed to return the order.",
          });
        }
      } catch (error) {
        console.error("Error returning the order:", error);
        Swal.fire({
          icon: "error",
          title: "Error",
          text: "An unexpected error occurred while returning the order.",
        });
      }

      // Close the modal
      const modal = bootstrap.Modal.getInstance(document.getElementById("returnOrderModal"));
      modal.hide();

      // Clear the input field
      document.getElementById("returnOrderForm").reset();
    } else {
      console.log("User canceled the return.");
    }
  });
</script>


<script src="https://checkout.razorpay.com/v1/checkout.js"></script>

<script>
  document.getElementById("retryPayment").addEventListener("click", async (event) => {
  event.preventDefault();

  // Fetch the current order ID
  const orderId = "<%= order._id %>"; // Fetch this dynamically from the backend
  console.log(orderId)
  try {
    // Step 1: Call the backend to create a new Razorpay order for retry
    const response = await fetch("/users/razorPay/retryPayment", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ orderId }),
    });

    const data = await response.json();

    if (response.ok) {
      // Step 2: Initialize Razorpay with the new order details
      const options = {
        key: data.RAZOR_PAY_ID,
        amount: data.order.amount,
        currency: data.order.currency,
        name: "Sneakify",
        description: "Order Payment Retry",
        order_id: data.razorpayOrder.id,
        handler: async function (response) {
          // Step 3: Send payment details to verify
          try {
            const verifyResponse = await fetch("/users/razorPay/verifyPayment", {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify({
                orderId: data.order._id,
                razorpayOrderId: response.razorpay_order_id,
                razorpayPaymentId: response.razorpay_payment_id,
                signature: response.razorpay_signature,
              }),
            });

            const verifyResult = await verifyResponse.json();
            if (verifyResponse.ok) {
              Swal.fire({
                icon: "success",
                title: "Payment Success!",
                text: `Your order ID is ${verifyResult.order.orderId}`,
                showConfirmButton: true,
              }).then(() => {
                window.location.href = `/users/orderPlaced?orderId=${verifyResult.order._id}`;
              });
            } else {
              Swal.fire({
                icon: "error",
                title: "Payment Failed",
                text: verifyResult.message || "Please try again.",
                showConfirmButton: true,
              });
            }
          } catch (error) {
            console.error("Error verifying payment:", error);
            Swal.fire({
              icon: "error",
              title: "Error",
              text: "Something went wrong during payment verification.",
              showConfirmButton: true,
            });
          }
        },
        prefill: {
          name: data.order.customerName,
          email: "example@example.com", // Replace with actual email
          contact: data.order.customerPhone,
        },
        theme: {
          color: "#3399cc",
        },
      };

      const rzp = new Razorpay(options);
      rzp.open();
    } else {
      Swal.fire({
        icon: "error",
        title: "Error",
        text: data.message || "Failed to initiate payment retry.",
        showConfirmButton: true,
      });
    }
  } catch (error) {
    console.error("Error retrying payment:", error);
    Swal.fire({
      icon: "error",
      title: "Error",
      text: "Something went wrong. Please try again.",
      showConfirmButton: true,
    });
  }
});
</script>

<%- include("partials/footer") %>