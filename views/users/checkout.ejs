<%-include("partials/header") %>

<style>
  .address-box {
    border: 1px solid #ddd;
    border-radius: 8px;
    padding: 15px;
    margin-bottom: 15px;
    background-color: #f9f9f9;
  }

  .product-item {
    border-bottom: 1px solid #ddd;
    padding-bottom: 15px;
    margin-bottom: 15px;
  }

  .product-image {
    width: 100px;
    height: 100px;
    object-fit: cover;
    border-radius: 8px;
  }

  .body {
    background-color: red;
  }
  .payment-method-container {
    display: flex;
    flex-direction: column;
    gap: 15px;
    margin-top: 20px;
  }

  .payment-option {
    display: flex;
    align-items: center;
    border: 2px solid #dcdcdc;
    border-radius: 8px;
    padding: 15px;
    background-color: #fff;
    transition: all 0.3s ease;
  }

  .payment-option label {
    margin-left: 10px;
    font-weight: bold;
    color: #333;
    font-size: 16px;
  }

  .payment-option input[type="radio"]:checked + label {
    color: #ffffff;
    background-color: #5cb85c;
    padding: 8px 12px;
    border-radius: 5px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    font-size: 18px;
  }

  .payment-option:hover {
    border-color: #5cb85c;
    box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
  }

  .payment-option input[type="radio"] {
    display: none; 
  }

</style>
<div class="container mt-4">
  <nav aria-label="breadcrumb">
    <ol class="breadcrumb">
      <li class="breadcrumb-item"><a href="/">Home</a></li>
      <li class="breadcrumb-item"><a href="/users/cart">Cart</a></li>
      <li class="breadcrumb-item"><a href="/users/checkout">Checkout</a></li>
      
    </ol>
  </nav>
  <h3>Checkout</h3>
  <nav>
    <ul class="nav nav-tabs">
      <li class="nav-item">
        <a class="nav-link active" href="#">Address</a>
      </li>
      <li class="nav-item">
        <a class="nav-link" href="#">Payment</a>
      </li>
    </ul>
  </nav>

  <div class="row">
    <!-- Address Section -->
    <div class="col-lg-6">
      <div class="card mb-4">
        <div class="card-body">
          <h3 class="card-title">Shipping Address</h3>
          <% if (addresses.length > 0) { %>
          <% addresses.forEach((address, index) => { %>
          <div class="card mb-3">
            <div class="card-body">
              <p><strong><%= address.firstName %> <%= address.lastName %></strong></p>
              <p><%= address.address %></p>
              <p><%= address.city %>, <%= address.state %>, <%= address.pincode %></p>
              <p><%= address.country %></p>
              <p>Phone: <%= address.phone %></p>

              <!-- Button to select this address -->
              <button class="btn btn-outline-primary btn-sm w-100 mt-2 select-address" id="selectedindex" data-index="<%= index %>">Use This Address</button>
            </div>
          </div>

          <!-- Hidden address details -->
          <div class="hidden-address" id="hidden-address-<%= index %>" style="display: none;">
            <input type="text" class="hidden" id="hidden-firstName-<%= index %>" value="<%= address.firstName %>">
            <div id="hidden-firstNameError-<%= index %>" class="error-message text-danger"></div>

            <input type="text" class="hidden" id="hidden-lastName-<%= index %>" value="<%= address.lastName %>">
            <div id="hidden-lastNameError-<%= index %>" class="error-message text-danger"></div>

            <textarea class="hidden" id="hidden-addressLine1-<%= index %>"><%= address.address %></textarea>
            <div id="hidden-addressLine1Error-<%= index %>" class="error-message text-danger"></div>

            <input type="text" class="hidden" id="hidden-city-<%= index %>" value="<%= address.city %>">
            <div id="hidden-cityError-<%= index %>" class="error-message text-danger"></div>

            <input type="text" class="hidden" id="hidden-state-<%= index %>" value="<%= address.state %>">
            <div id="hidden-stateError-<%= index %>" class="error-message text-danger"></div>

            <input type="text" class="hidden" id="hidden-pincode-<%= index %>" value="<%= address.pincode %>">
            <div id="hidden-pincodeError-<%= index %>" class="error-message text-danger"></div>

            <input type="text" class="hidden" id="hidden-country-<%= index %>" value="<%= address.country %>">
            <div id="hidden-countryError-<%= index %>" class="error-message text-danger"></div>

            <input type="text" class="hidden" id="hidden-phone-<%= index %>" value="<%= address.phone %>">
            <div id="hidden-phoneError-<%= index %>" class="error-message text-danger"></div>
          </div>

          <% }); %>

          <% } else { %>
          <p>No saved addresses found.</p>
          <% } %>
        </div>
      </div>
      <p class="text-center w-100 mt-3" data-bs-toggle="modal" data-bs-target="#addAddressModal"> Address</p>
    </div>

    <!-- Order Details Section -->
    <div class="col-lg-6 ">
      <div class="card mb-4">
        <div class="card-body">
          <h3 class="card-title">Order Details</h3>
          <% products.forEach(product => { %>
          <div class="d-flex align-items-center mb-3">
            <img src="/<%= product.imageUrl %>" alt="<%= product.name %>" class="rounded me-3" style="width: 80px; height: 80px; object-fit: cover;">
            <div>
              <h5 class="mb-1"><%= product.name %></h5>
              <p class="mb-0"><%= product.description %></p>
              <p class="mb-0">Size: <%= product.size %></p>
              <% if (product.finalDiscount ) { %>
                <s class="text-muted">₹ <%= product.price.toFixed(2) %></s> 
                ₹ <%= product.finalDiscount.toFixed(2) %>
              <% } else { %>
                ₹ <%= product.price.toFixed(2) %>
              <% } %>
              <p class="mb-0">Quantity: <%= product.quantity %></p>
              <p>Total: ₹<%= (product.finalDiscount ?? product.price)*product.quantity %></p>
            </div>
          </div>
          <% }); %>
        </div>
      </div>

      <!-- Order Summary -->
      <div class="card">
        <div class="card-body">
          <h3 class="card-title">Order Summary</h3>
          <p>Items Total: ₹<%= cart.totalPrice %></p>
          <p>Shipping: ₹<%= shippingCharge %>
            <% if (shippingCharge === 0) { %>
            <span class="text-success">(Free)</span>
            <% } %>
          </p>
          <div class="summary-item">
            <p style="display: inline;">GST (Tax):</p>
            <p style="display: inline;">₹<%= cart.gst.toFixed(2) %></p>
          </div>
          <% if (cart.couponDiscount >0) { %>
          <p class="mt-2"> Coupon Discount:₹ <%=cart.couponDiscount  %> </p>
         <% } %>
          <h4 class="fw-bold mt-2" id="grandTotal" data-grandTotal="<%= grandTotal %>">Grand Total: ₹<%= grandTotal.toFixed(2) %></h4>
          <button id="placeOrder" class="btn btn-success w-100 mt-3" onclick="validateAddressFields()">Place Order</button>
        </div>
      </div>
    </div>
  </div>

  <div class="row mt-4 w-50">
    <div class="col-lg-12">
      <h5 class="mt-4">Add New Address</h5>
      <form id="newAddressForm">
        <div class="row g-3">
          <div class="col-md-6">
            <label for="firstName" class="form-label">First Name</label>
            <input type="text" class="form-control" id="firstName" required>
          </div>
          <div class="col-md-6">
            <label for="lastName" class="form-label">Last Name</label>
            <input type="text" class="form-control" id="lastName" required>
          </div>
          <div class="col-md-12">
            <label for="addressLine1" class="form-label">Address Line</label>
            <textarea class="form-control" id="addressLine1" rows="2" required></textarea>
          </div>
          <div class="col-md-4">
            <label for="city" class="form-label">City</label>
            <input type="text" class="form-control" id="city" required>
          </div>
          <div class="col-md-4">
            <label for="state" class="form-label">State</label>
            <input type="text" class="form-control" id="state" required>
          </div>
          <div class="col-md-4">
            <label for="pincode" class="form-label">Pincode</label>
            <input type="text" class="form-control" id="pincode" required>
          </div>
          <div class="col-md-6">
            <label for="phone" class="form-label">Phone Number</label>
            <input type="text" class="form-control" id="phone" required>
          </div>

        </div>
      </form>
    </div>
  </div>
  <hr>

  <div class="row mt-4">
    <div class="col-lg-6">
      <div class="card">
        <div class="card-body">
          <h4 class="card-title">Payment Method</h4>
          <form id="paymentForm">
            <div class="payment-method-container">
              <div class="payment-option">
                <input
                  type="radio"
                  name="paymentMethod"
                  value="cashOnDelivery"
                  id="cashOnDelivery"
                  checked
                />
                <label for="cod">Cash on Delivery</label>
              </div>
              <div class="payment-option">
                <input
                  type="radio"
                  name="paymentMethod"
                  value="razorPay"
                  id="online"

                />
                <label for="online">Online Payment</label>
              </div>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>
  


</div>

<script>
  const addressButtons = document.querySelectorAll('.select-address');
  addressButtons.forEach(button => {
    button.addEventListener('click', (e) => {
      const index = e.target.getAttribute('data-index');

      const hiddenAddress = document.getElementById(`hidden-address-${index}`);

      const firstName = document.getElementById(`hidden-firstName-${index}`).value;
      const lastName = document.getElementById(`hidden-lastName-${index}`).value;
      const addressLine = document.getElementById(`hidden-addressLine1-${index}`).value;
      const city = document.getElementById(`hidden-city-${index}`).value;
      const state = document.getElementById(`hidden-state-${index}`).value;
      const pincode = document.getElementById(`hidden-pincode-${index}`).value;
      const country = document.getElementById(`hidden-country-${index}`).value;
      const phone = document.getElementById(`hidden-phone-${index}`).value;

      document.getElementById('firstName').value = firstName;
      document.getElementById('lastName').value = lastName;
      document.getElementById('addressLine1').value = addressLine;
      document.getElementById('city').value = city;
      document.getElementById('state').value = state;
      document.getElementById('pincode').value = pincode;
      document.getElementById('phone').value = phone;
    });
  });
</script>
<script>
const selectedAddress = document.querySelector('.select-address.active');
const index = selectedAddress ? selectedAddress.getAttribute('data-index') : null;
  function validateAddressFields(index) {
    console.log(index)
   
}
  const nameRegex = /^[a-zA-Z\s]+$/;
  const numberRegex = /^\d+$/;

  // Reset error messages
  document.getElementById(`hidden-firstNameError-${index}`).textContent = '';
  document.getElementById(`hidden-lastNameError-${index}`).textContent = '';
  document.getElementById(`hidden-addressLine1Error-${index}`).textContent = '';
  document.getElementById(`hidden-cityError-${index}`).textContent = '';
  document.getElementById(`hidden-stateError-${index}`).textContent = '';
  document.getElementById(`hidden-pincodeError-${index}`).textContent = '';
  document.getElementById(`hidden-countryError-${index}`).textContent = '';
  document.getElementById(`hidden-phoneError-${index}`).textContent = '';

  // Validate First Name
  const firstName = document.getElementById(`hidden-firstName-${index}`).value;
  if (!nameRegex.test(firstName)) {
    document.getElementById(`hidden-firstNameError-${index}`).textContent = 'Alphabets only';
    return false;
  }

  // Validate Last Name
  const lastName = document.getElementById(`hidden-lastName-${index}`).value;
  if (!nameRegex.test(lastName)) {
    document.getElementById(`hidden-lastNameError-${index}`).textContent = 'Alphabets only';
    return false;
  }

  // Validate Address Line
  const addressLine1 = document.getElementById(`hidden-addressLine1-${index}`).value;
  if (!addressLine1.trim()) {
    document.getElementById(`hidden-addressLine1Error-${index}`).textContent = 'Address cannot be empty';
    return false;
  }

  // Validate City
  const city = document.getElementById(`hidden-city-${index}`).value;
  if (!nameRegex.test(city)) {
    document.getElementById(`hidden-cityError-${index}`).textContent = 'Alphabets only';
    return false;
  }

  // Validate State
  const state = document.getElementById(`hidden-state-${index}`).value;
  if (!nameRegex.test(state)) {
    document.getElementById(`hidden-stateError-${index}`).textContent = 'Alphabets only';
    return false;
  }

  // Validate Pincode
  const pincode = document.getElementById(`hidden-pincode-${index}`).value;
  if (!numberRegex.test(pincode) || pincode.length !== 6) {
    document.getElementById(`hidden-pincodeError-${index}`).textContent = 'Pincode must be exactly 6 digits';
    return false;
  }

  // Validate Country
  const country = document.getElementById(`hidden-country-${index}`).value;
  if (!nameRegex.test(country)) {
    document.getElementById(`hidden-countryError-${index}`).textContent = 'Alphabets only';
    return false;
  }

  // Validate Phone
  const phone = document.getElementById(`hidden-phone-${index}`).value;
  if (!numberRegex.test(phone) || phone.length !== 10) {
    document.getElementById(`hidden-phoneError-${index}`).textContent = 'Phone number must be exactly 10 digits';
    return false;
  }

  return true; // All validations passed
}

</script>
<script src="https://checkout.razorpay.com/v1/checkout.js"></script>


<script>
  document.getElementById("placeOrder").addEventListener("click", async (event) => {
    event.preventDefault();
    if (!document.getElementById("firstName").value || 
        !document.getElementById("lastName").value ||
        !document.getElementById("addressLine1").value ||
        !document.getElementById("city").value ||
        !document.getElementById("state").value ||
        !document.getElementById("pincode").value ||
        !document.getElementById("phone").value) {
        
        Swal.fire({
            icon: 'warning',
            title: 'Missing Address Details',
            text: 'Please fill in all address fields',
            showConfirmButton: false,
            timer: 1500
        });
        return;
    }
    const amount = "<%=grandTotal%>"; // Fetch the grand total dynamically
    console.log(amount, "total amount");

    const addressDetails = {
      firstName: document.getElementById("firstName").value,
      lastName: document.getElementById("lastName").value,
      address: document.getElementById("addressLine1").value,
      city: document.getElementById("city").value,
      state: document.getElementById("state").value,
      pincode: document.getElementById("pincode").value,
      country: "India",
      phone: document.getElementById("phone").value,
    };

    const paymentMethod = document.querySelector('input[name="paymentMethod"]:checked')?.value;

    if (!paymentMethod) {
      Swal.fire({
        icon: "warning",
        title: "Payment Method Required",
        text: "Please select a payment method.",
        showConfirmButton: false,
        timer: 1000,
      });
      return;
    }

    if (paymentMethod === "cashOnDelivery") {
      // Handle Cash on Delivery (COD)
      try {
        const response = await fetch("/users/placeOrder", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ addressDetails, paymentMethod }),
        });

        const result = await response.json();
        if (response.ok) {
          Swal.fire({
            icon: "success",
            title: "Order Placed!",
            text: `Your order ID is ${result.displayOrderId}`,
            showConfirmButton: true,
          }).then(() => {
            window.location.href = `/users/orderPlaced?orderId=${result.orderId}`;
          });
        } else {
          Swal.fire({
            icon: "error",
            title: "Error",
            text: result.message || "Something went wrong. Please try again.",
            showConfirmButton: true,
          });
        }
      } catch (error) {
        console.error("Error placing order:", error);
        Swal.fire({
          icon: "error",
          title: "Error",
          text: "Something went wrong. Please try again.",
          showConfirmButton: true,
        });
      }
    } else if (paymentMethod === "razorPay") {
      // Handle Razorpay Payment
      try {
        // Step 1: Create Razorpay order
        const createOrderResponse = await fetch("/users/razorPay/createOrder", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ addressDetails, paymentMethod }), // Amount in INR
        });

        const { order, razorpayOrder,RAZOR_PAY_ID } = await createOrderResponse.json();
        console.log(order,";;;;")
        // Step 2: Initialize Razorpay
        const options = {
          key: RAZOR_PAY_ID,
          amount: order.amount,
          currency: order.currency,
          name: "Sneakify",
          description: "Order Payment",
          order_id: razorpayOrder.id,
          handler: async function (response) {
            console.log(response)
            try {
        
              const verifyResponse = await fetch("/users/razorPay/verifyPayment", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({
                  orderId: order._id,
                  razorpayOrderId:response.razorpay_order_id,
                  razorpayPaymentId: response.razorpay_payment_id,
                  signature: response.razorpay_signature,
                }),
              });

              const verifyResult = await verifyResponse.json();
              console.log(verifyResult)
              if (verifyResponse.ok) {
                Swal.fire({
                  icon: "success",
                  title: "Payment successfull!",
                  text: `Your order ID is ${verifyResult.order.orderId}`,
                  showConfirmButton: true,
                }).then(() => {
                  window.location.href = `/users/orderPlaced?orderId=${verifyResult.order._id}`;
                });
              } else {
                Swal.fire({
                  icon: "error",
                  title: "Payment Failed",
                  text: verifyResult.message || "Please try again.",
                  showConfirmButton: true,
                });
              }
            } catch (error) {
              console.error("Error verifying payment:", error);
              Swal.fire({
                icon: "error",
                title: "Error",
                text: "Something went wrong during payment verification.",
                showConfirmButton: true,
              });
            }
          },
          prefill: {
            name: `${addressDetails.firstName} ${addressDetails.lastName}`,
            email: "example@example.com", // Replace with the user's email
            contact: addressDetails.phone,
          },
          theme: {
            color: "#3399cc",
          },
        };

        const rzp = new Razorpay(options);

        // Razorpay Event Listeners
        rzp.on("payment.failed", async function (response) {
          console.error("Payment Failed:", response);
         
          const handleFailure = await fetch ("/users/handlePaymentFailure",{
            method:"POST",
            headers:{"content-Type":"application/json"},
            body:JSON.stringify({
              orderId: order._id,
              paymentStatus: "failed",
              status: "incomplete",
            })
          })
         const result = await handleFailure.json()
         if(handleFailure.ok){
          Swal.fire({
            icon: "error",
            title: "Payment Failed",
            text: result.message||"Your payment was not successful. Please try again.",
            showConfirmButton: true,
          }).then(()=>location.reload())
         } 
         
        });

        rzp.open();
      } catch (error) {
        console.error("Error with Razorpay payment:", error);
        Swal.fire({
          icon: "error",
          title: "Error",
          text: "Something went wrong during payment. Please try again.",
          showConfirmButton: true,
        });
      }
    }
  });
</script>

<script src="https://checkout.razorpay.com/v1/checkout.js"></script>




<%-include("partials/footer") %>