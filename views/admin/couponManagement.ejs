<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Sneakify - Coupon Management</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
</head>

<body class="bg-gray-100">
  <%- include("partials/sidebar") %>
  <div class="w-75">
    <!-- Header -->
    <header class="bg-white shadow-sm">
      <div class="d-flex justify-content-between align-items-center px-4 py-3 border-bottom">
        <h1 class="fs-5 fw-semibold">Coupons</h1>
        <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addCouponModal">Add New</button>
      </div>
    </header>

    <!-- Add Coupon Modal -->
    <div id="addCouponModal" class="modal fade" tabindex="-1" aria-hidden="true">
      <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title">Add Coupon</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            <form id="addCouponForm">

              <div id="errorContainer" class="mb-3  alert alert-danger" style="display: none;">
              </div>

              <div class="mb-3">
                <label for="code" class="form-label">Coupon Code:</label>
                <input type="text" id="code" name="code" class="form-control" required>
              </div>

              <div class="mb-3">
                <label for="discountType" class="form-label">Discount Type:</label>
                <select id="discountType" name="discountType" class="form-select">
                  <option value="fixed">Fixed</option>
                  <option value="percentage">Percentage</option>
                </select>
              </div>

              <div class="mb-3" id="discountValueField" style="display: block;">
                <label for="discountValue" class="form-label">Discount Value:</label>
                <input type="number" id="discountValue" name="discountValue" class="form-control">
              </div>

              <div class="mb-3" id="maxDiscountField" style="display: none;">
                <label for="maximumDiscount" class="form-label">Maximum Discount (for %):</label>
                <input type="number" id="maximumDiscount" name="maximumDiscount" class="form-control">
              </div>

              <div class="mb-3">
                <label for="minimumPurchase" class="form-label">Minimum Purchase (₹):</label>
                <input type="number" id="minimumPurchase" name="minimumPurchase" class="form-control" required>
              </div>

              <div class="mb-3">
                <label for="startDate" class="form-label">Start Date:</label>
                <input type="date" id="startDate" name="startDate" class="form-control" required>
              </div>

              <div class="mb-3">
                <label for="expiryDate" class="form-label">Expiry Date:</label>
                <input type="date" id="expiryDate" name="expiryDate" class="form-control" required>
              </div>

              <div class="d-flex justify-content-end">
                <button type="button" class="btn btn-secondary me-2" data-bs-dismiss="modal">Cancel</button>
                <button type="submit" class="btn btn-primary">Add</button>
              </div>
            </form>
          </div>
        </div>
      </div>
    </div>

    <!-- Coupon Table -->
    <div class="p-4">
      <div class="card">
        <div class="card-body">
          <table class="table table-striped">
            <thead>
              <tr>
                <th scope="col">#</th>
                <th scope="col">Code</th>
                <th scope="col">Type</th>
                <th scope="col">Value</th>
                <th scope="col">Min Purchase</th>
                <th scope="col">Start Date</th>
                <th scope="col">Expiry Date</th>
                <th scope="col">Actions</th>
              </tr>
            </thead>
            <tbody>
              <% coupons.forEach((coupon, index) => { %>
              <tr>
                <td><%= index + 1 %></td>
                <td><%= coupon.code %></td>
                <td><%= coupon.discountType === "percentage" ? "Percentage" : "Fixed" %></td>
                <td>
                  <%= coupon.discountValue %>
                  <% if (coupon.discountType === "percentage" && coupon.maximumDiscount) { %>
                  <%= coupon.maximumDiscount %>%
                  <% } %> </td>
                <td>₹<%= coupon.minimumPurchase %> </td>
                <td><%= coupon.startDate.toDateString() %></td>
                <td><%= coupon.expiryDate.toDateString() %></td>
                <td>
                  <button class="btn btn-warning edit-btn" data-bs-toggle="modal" data-bs-target="#editModal" onclick="populateCoupon('<%=coupon._id%>')">Edit</button>
                  <form action="/admin/<%=coupon._id %>/<%=coupon.isActive?'delete':'deleted' %>" method="POST" style="display: inline;">
                    <button type="submit" class="btn <%=coupon.isActive?'btn-danger':'btn-secondary'%> btn-sm"><%=coupon.isActive?"delete":"deleted" %></button>
                  </form>
                </td>
              </tr>
              <% }); %>
            </tbody>
          </table>
        </div>
      </div>
    </div>
  </div>

  <div class="modal fade" id="editModal" tabindex="-1" aria-labelledby="editModalLabel" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="editModalLabel">Edit Coupon</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <form id="editCouponForm">

            <div id="editErrorContainer" class="mb-3  alert alert-danger" style="display: none;"></div>

            <div class="mb-3">
              <label for="editCode" class="form-label">Code</label>
              <input type="text" class="form-control" id="editCode" name="code" required>
            </div>

            <div class="mb-3">
              <label for="editDiscountType" class="form-label">Discount Type</label>
              <select class="form-select" id="editDiscountType" name="discountType" required>
                <option value="fixed">Fixed</option>
                <option value="percentage">Percentage</option>
              </select>
            </div>


            <div class="mb-3" id="editDiscountValueField">
              <label for="editDiscountValue" class="form-label">Discount Value</label>
              <input type="number" class="form-control" id="editDiscountValue" name="discountValue" >
            </div>

            <div class="mb-3" id="editMaxDiscountField" style="display: none;">
              <label for="editMaximumDiscount" class="form-label">Maximum Discount  %:</label>
              <input type="number" id="editMaximumDiscount" name="maximumDiscount" class="form-control">
            </div>
            <div class="mb-3">
              <label for="editMinimumPurchase" class="form-label">Minimum Purchase</label>
              <input type="number" class="form-control" id="editMinimumPurchase" name="minimumPurchase" required>
            </div>

            <div class="mb-3">
              <label for="editStartDate" class="form-label">Start Date</label>
              <input type="date" class="form-control" id="editStartDate" name="startDate" required>
            </div>
            <div class="mb-3">
              <label for="editExpiryDate" class="form-label">Expiry Date</label>
              <input type="date" class="form-control" id="editExpiryDate" name="expiryDate" required>
            </div>
            <div class="modal-footer">
              <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
              <button type="submit" class="btn btn-primary">Save Changes</button>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>


  <script>
    //display discount field and percentage value 
    document.getElementById("discountType").addEventListener("change", (event) => {
      const discountType = event.target.value;
      const maxDiscountField = document.getElementById("maxDiscountField");
      const discountValueField = document.getElementById("discountValueField")

      if (discountType === "percentage") {
        maxDiscountField.style.display = "block";
        discountValueField.style.display = "none"

      } else {
        maxDiscountField.style.display = "none";
        discountValueField.style.display = "block"

      }
    });
  </script>


  <script>
    //add product form
    document.getElementById("addCouponForm").addEventListener("submit", async (e) => {
      e.preventDefault();
      const errorContainer = document.getElementById("errorContainer");
      errorContainer.innerHTML = '';
      const errors = [];
      const formData = new FormData(addCouponForm);
      const data = Object.fromEntries(formData.entries());
      console.log(Object.fromEntries(formData.entries()));

      // code
      if (!/^[A-Z0-9]{5,15}$/.test(data.code)) {
        errors.push("Code must be 5-15 characters long and contain only uppercase letters and numbers.");
      }


      const discountValue = parseFloat(data.discountValue);
      if (!discountValue || discountValue <= 0) {
        errors.push("Discount value must be a positive number.");
      }
      if (data.discountType === 'percentage' && discountValue > 100) {
        errors.push("Percentage discount value cannot exceed 100%.");
      }

      const minimumPurchase = parseFloat(data.minimumPurchase);
      if (data.discountType === 'fixed' && discountValue > minimumPurchase) {
        errors.push("For fixed discounts, the discount value cannot exceed the minimum purchase value.");
      }

      const maximumDiscount = parseFloat(data.maximumDiscount);
      if (data.discountType === 'percentage' && (!maximumDiscount || maximumDiscount <= 0)) {
        errors.push("Maximum discount must be a positive number for percentage discounts.");
      }

      if (!minimumPurchase || minimumPurchase < 0) {
        errors.push("Minimum purchase must be a non-negative number.");
      }
      const today = new Date();
      const startDate = new Date(data.startDate);
      if (!data.startDate || startDate < today) {
        errors.push("Start date must be today or a future date.");
      }

      // expiryDate
      const expiryDate = new Date(data.expiryDate);
      if (!data.expiryDate || expiryDate <= startDate) {
        errors.push("Expiry date must be later than the start date.");
      }

      console.log(errors, "errors")
      console.log(errorContainer)
      if (errors.length > 0) {
        errorContainer.innerHTML = errors.map(error => `<p>${error}</p>`).join('');
        errorContainer.style.display = 'block';
        console.log(errorContainer);
        return; // Stop form submission if validation fails
      }

      try {
        const response = await fetch("/admin/addCoupon", {
          method: "POST",
          headers: {
            "content-Type": "application/json"
          },
          body: JSON.stringify(data)
        });

        console.log(response, "response");
        const datas = await response.json();
        console.log(datas);

        if (response.ok) {
          swal.fire({
            icon: "success",
            title: "Success",
            text: datas.message || "Coupon added successfully"
          }).then(() => location.reload());
        } else {
          swal.fire({
            icon: 'error',
            title: "Failed",
            text: datas.message || "Could not add coupon"
          });
        }

      } catch (error) {
        console.log(error);
        swal.fire({
          icon: "error",
          title: "Failed",
          text: "Something went wrong"
        });
      }
    });
  </script>



<script>
  async function populateCoupon(couponId) {
    try {
      let response = await fetch(`/admin/getCoupon/${couponId}`);
      const data = await response.json();
      console.log(data,"data after fetching the single coupon")
      const { couponData } = data;

      document.getElementById('editCode').value = couponData.code;
      document.getElementById('editDiscountType').value = couponData.discountType;
      document.getElementById('editDiscountValue').value = couponData.discountValue;
      document.getElementById('editMaximumDiscount').value = couponData.maximumDiscount;
      document.getElementById('editMinimumPurchase').value = couponData.minimumPurchase;
      document.getElementById('editStartDate').value = new Date(couponData.startDate).toISOString().split('T')[0];
      document.getElementById('editExpiryDate').value = new Date(couponData.expiryDate).toISOString().split('T')[0];

      const discountTypeField = document.getElementById("editDiscountType");
      discountTypeField.dispatchEvent(new Event("change"));

      document.getElementById("editCouponForm").addEventListener("submit", async (e) => {
        e.preventDefault();
        const errorContainer = document.getElementById("editErrorContainer");
        errorContainer.innerHTML = '';
        const errors = [];

        const formData = new FormData(e.target);
        const data = Object.fromEntries(formData.entries());

    // Clear irrelevant fields based on discount type
    if (data.discountType === "percentage") {
        data.discountValue = ""; // Ignore discountValue for percentage
    } else if (data.discountType === "fixed") {
        data.maximumDiscount = ""; // Ignore maximumDiscount for fixed
    }

    // Validate Coupon Code
    if (!/^[A-Z0-9]{5,15}$/.test(data.code)) {
        errors.push("Code must be 5-15 characters long and contain only uppercase letters and numbers.");
    }

    // Validate Discount Value
    if (data.discountType === "fixed") {
        const discountValue = parseFloat(data.discountValue);
        if (!discountValue || discountValue <= 0) {
            errors.push("Discount value must be a positive number for fixed discounts.");
        }

        // If type is fixed, ensure discount value is not greater than minimum purchase
        const minimumPurchase = parseFloat(data.minimumPurchase);
        if (discountValue > minimumPurchase) {
            errors.push("For fixed discounts, the discount value cannot exceed the minimum purchase value.");
        }
    }

    // Validate Maximum Discount for Percentage
    if (data.discountType === "percentage") {
        const maximumDiscount = parseFloat(data.maximumDiscount);
        if (!maximumDiscount || maximumDiscount <= 0||maximumDiscount>50) {
            errors.push("Maximum discount must be a positive number for percentage discounts.");
        }
    }

    // Validate Minimum Purchase
    const minimumPurchase = parseFloat(data.minimumPurchase);
    if (!minimumPurchase || minimumPurchase < 0) {
        errors.push("Minimum purchase must be a non-negative number.");
    }

    // Validate Start Date
    const today = new Date();
    const startDate = new Date(data.startDate);
    if (!data.startDate || startDate < today) {
        errors.push("Start date must be today or a future date.");
    }

    // Validate Expiry Date
    const expiryDate = new Date(data.expiryDate);
    if (!data.expiryDate || expiryDate <= startDate) {
        errors.push("Expiry date must be later than the start date.");
    }

    // If there are errors, display them
    if (errors.length > 0) {
        errorContainer.innerHTML = errors.map(error => `<p>${error}</p>`).join('');
        errorContainer.style.display = 'block';
        return;
    }

        try {
          const response = await fetch(`/admin/editCoupon/${couponId}`, {
            method: "PUT",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify(data),
          });

          const result = await response.json();
          console.log(result, "result of the edit coupon")
          if (response.ok) {
            swal.fire({
              icon: "success",
              title: "Success",
              text: result.message || "Coupon edited successfully",
            }).then(() => location.reload());
          } else {
            swal.fire({
              icon: "error",
              title: "Failed",
              text: result.message || "Could not edit coupon",
            });
          }
        } catch (error) {
          swal.fire({
            icon: "error",
            title: "Failed",
            text: "Something went wrong",
          });
        }
      });
    } catch (error) {
      console.error("Error populating coupon data:", error);
    }
  }
</script>

<script>
  //logic of discountvalue and maxcount percentage
  document.getElementById("editDiscountType").addEventListener("change", (event) => {
  const editDiscountType = event.target.value;
  const maxDiscountField = document.getElementById("editMaxDiscountField");
  const discountValueField = document.getElementById("editDiscountValueField");

  if (editDiscountType === "percentage") {
    maxDiscountField.style.display = "block"; // Show maximum discount
    discountValueField.style.display = "none"; // Show discount value
  } else {
    maxDiscountField.style.display = "none"; // Hide maximum discount
    discountValueField.style.display = "block"; // Show discount value
  }
});
</script>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

</body>

</html>