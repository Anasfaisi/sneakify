<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Sneakify - Offer Management</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
</head>

<body class="bg-gray-100">
  <%- include("partials/sidebar") %>
  <div class="container w-75">
    <!-- Header -->
    <header class="bg-white shadow-sm">
      <div class="d-flex justify-content-between align-items-center px-4 py-3 border-bottom">
        <h1 class="fs-5 fw-semibold">Offers</h1>
        <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addOfferModal">Add New Offer</button>
      </div>
    </header>

    <!-- Offers Table -->
    <div class="mt-4">
      <h2 class="fs-6">All Offers</h2>
      <table class="table table-bordered">
        <thead>
          <tr>
            <th>Offer Type</th>
            <th>Offer Name</th>
            <th>Discount (%)</th>
            <th>Maximum Discount (₹)</th>
            <th>Valid From</th>
            <th>Valid Until</th>
            <th>Applied To</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody>
          <% offers.forEach((offer) => { %>
            <tr>
              <td><%= offer.offerType %></td>
              <td><%= offer.offerName %></td>
              <td><%= offer.percentage %>%</td>
              <td><%= offer.maximumDiscount ? `₹${offer.maximumDiscount}` : 'N/A' %></td>
              <td><%= new Date(offer.validFrom).toLocaleDateString() %></td>
              <td><%= new Date(offer.validUntil).toLocaleDateString() %></td>
              <td><%= offer.offerType === 'product' ? `Product: ${offer.productName}` : `Category: ${offer.categoryName}` %></td>
              <td>
                <button class="btn btn-sm btn-warning edit-btn" data-bs-toggle="modal" data-bs-target="#editOfferModal"="" onclick="populateOffer('<%= offer._id    %>')">Edit</button>
                <form action="/admin/offer/<%= offer._id %>/<%= offer.isActive ? 'delete' : 'deleted' %>" method="POST" style="display: inline;">
                    <button type="submit" class="btn <%= offer.isActive ? 'btn-danger' : 'btn-secondary' %> btn-sm">
                      <%= offer.isActive ? "Delete" : "Deleted" %>
                    </button>
                  </form>
                                </td>
            </tr>
          <% }); %>
        </tbody>
      </table>
    </div>


   <!-- Add Offer Modal -->
<div id="addOfferModal" class="modal fade" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title">Add New Offer</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <form id="addOfferForm" method="POST" action="/admin/addOffer">
            <div id="errorContainer" class="mb-3  alert alert-danger" style="display: none;">
            </div>
            <div class="mb-3">
              <label for="offerType" class="form-label">Offer Type:</label>
              <select name="offerType" id="offerType" class="form-select" required >
                <option value="" disabled selected>Select Offer Type</option>
                <option value="product">Product Offer</option>
                <option value="category">Category Offer</option>
                <option value="referral">Referral</option>
              </select>
            </div>
  
            <div class="mb-3">
              <label for="offerName" class="form-label">Offer Name:</label>
              <input type="text" name="offerName" id="offerName" class="form-control" required>
            </div>
  
            <div class="mb-3">
                <label for="percentage" class="form-label">Discount (%)</label>
                <input type="number" name="percentage" id="percentage" class="form-control" min="0" max="100" required>
            </div>

            <div id="maximumDiscountField" class="mb-3" >
              <label for="maximumDiscount" class="form-label">Maximum Discount (₹):</label>
              <input type="number" name="maximumDiscount" id="maximumDiscount" class="form-control" min="0" required>
            </div>
  
            <div class="mb-3">
              <label for="validFrom" class="form-label">Valid From:</label>
              <input type="date" name="validFrom" id="validFrom" class="form-control" required>
            </div>
  
            <div class="mb-3">
              <label for="validUntil" class="form-label">Valid Until:</label>
              <input type="date" name="validUntil" id="validUntil" class="form-control" required>
            </div>
  
  
            <div id="appliedToField" class="mb-3" style="display: none;">
                <label for="appliedTo" class="form-label">Apply To:</label>
                <select name="appliedToProduct" id="appliedToProduct" class="form-select">
                    <% applicableProducts.forEach(function(item) { %>
                        <option value="<%= item._id %>"><%= item.name %></option>
                    <% }); %>
                </select>
            </div>
            <div id="appliedToCategoryField" class="mb-3" style="display: none;">
                <label for="appliedToCategory" class="form-label">Apply To (Category):</label>
                <select name="appliedToCategory" id="appliedToCategory" class="form-select">
                    <% applicableCategories.forEach(function(item) { %>
                        <% if (item._id && item.name) { %> <!-- Ensure item has the necessary properties -->
                            <option value="<%= item._id %>"><%= item.name %></option>
                        <% } %>
                    <% }); %>
                </select>
            </div>

            
  
        
            <div class="d-flex justify-content-end">
              <button type="button" class="btn btn-secondary me-2" data-bs-dismiss="modal">Cancel</button>
              <button type="submit" class="btn btn-primary">Save Offer</button>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>
  


<!-- Edit Offer Modal -->
<div id="editOfferModal" class="modal fade" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title">Edit Offer</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <form id="editOfferForm" method="POST" action="/admin/editOffer">
            <div id="editErrorContainer" class="mb-3 alert alert-danger" style="display: none;"></div>
  
            <!-- Offer Type -->
            <div class="mb-3">
              <label for="editOfferType" class="form-label">Offer Type:</label>
              <select name="offerType" id="editOfferType" class="form-select" required>
                <option value="" disabled>Select Offer Type</option>
                <option value="product">Product Offer</option>
                <option value="category">Category Offer</option>
                <option value="referral">Referral</option>
              </select>
            </div>
  
            <!-- Offer Name -->
            <div class="mb-3">
              <label for="editOfferName" class="form-label">Offer Name:</label>
              <input type="text" name="offerName" id="editOfferName" class="form-control" required>
            </div>
  
            <!-- Discount Percentage -->
            <div class="mb-3">
              <label for="editPercentage" class="form-label">Discount (%)</label>
              <input type="number" name="percentage" id="editPercentage" class="form-control" min="0" max="100" required>
            </div>
  
            <!-- Maximum Discount -->
            <div id="editMaximumDiscountField" class="mb-3">
              <label for="editMaximumDiscount" class="form-label">Maximum Discount (₹):</label>
              <input type="number" name="maximumDiscount" id="editMaximumDiscount" class="form-control" min="0">
            </div>
  
            <!-- Valid From -->
            <div class="mb-3">
              <label for="editValidFrom" class="form-label">Valid From:</label>
              <input type="date" name="validFrom" id="editValidFrom" class="form-control" required>
            </div>
  
            <!-- Valid Until -->
            <div class="mb-3">
              <label for="editValidUntil" class="form-label">Valid Until:</label>
              <input type="date" name="validUntil" id="editValidUntil" class="form-control" required>
            </div>
  
            <!-- Apply To (Product) -->
            <div id="editAppliedToField" class="mb-3" style="display: none;">
              <label for="editAppliedTo" class="form-label">Apply To:</label>
              <select name="appliedToProduct" id="editappliedToProduct" class="form-select">
                <% applicableProducts.forEach(function(item) { %>
                  <option value="<%= item._id %>"><%= item.name %></option>
                <% }); %>
              </select>
            </div>
  
            <!-- Apply To (Category) -->
            <div id="editAppliedToCategoryField" class="mb-3" style="display: none;">
              <label for="editAppliedToCategory" class="form-label">Apply To (Category):</label>
              <select name="appliedToCategory" id="editAppliedToCategory" class="form-select">
                <% applicableCategories.forEach(function(item) { %>
                  <option value="<%= item._id %>"><%= item.name %></option>
                <% }); %>
              </select>
            </div>
  
          
  
            <!-- Buttons -->
            <div class="d-flex justify-content-end">
              <button type="button" class="btn btn-secondary me-2" data-bs-dismiss="modal">Cancel</button>
              <button type="submit" class="btn btn-primary">Save Offer</button>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>
  

  



  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>


  <script>
    document.addEventListener('DOMContentLoaded', function() {
        const offerTypeSelect = document.getElementById('offerType');
        const appliedToField = document.getElementById('appliedToField');
        const appliedToCategoryField = document.getElementById('appliedToCategoryField');
        const appliedToProduct = document.getElementById("appliedToProduct")
        const appliedToCategory= document.getElementById("appliedToCategory")

        // Initial setup based on default selected offerType
        toggleApplyToFields(offerTypeSelect.value);

        // Add event listener for offerType dropdown change
        offerTypeSelect.addEventListener('change', function() {
            toggleApplyToFields(offerTypeSelect.value);
        });

        function toggleApplyToFields(offerType) {
            // Toggle visibility based on selected offerType
            if (offerType === 'product') {
                appliedToField.style.display = 'block';
                appliedToCategoryField.style.display = 'none';
                appliedToCategory.innerHTML=""
            } else if (offerType === 'category') {
                appliedToField.style.display = 'none';
                appliedToCategoryField.style.display = 'block';
                appliedToProduct.innerHTML=""
            }
        }
    });
</script>


  <script>
    //add offer
    document.getElementById("addOfferForm").addEventListener("submit", async (e) => {
      e.preventDefault();

      const errorContainer = document.getElementById('errorContainer');
    errorContainer.innerHTML = ''; // Clear previous errors
    const errors = [];
    const formData = new FormData(addOfferForm);
    const data = Object.fromEntries(formData.entries());
    console.log('Form Data:', data);

    // Offer Type Validation
    if (!data.offerType) {
        errors.push("Offer type is required.");
    }

    // Offer Name Validation
    if (!data.offerName || data.offerName.trim() === ''||!/^[A-Z0-9]/.test(data.offerName)) {
        errors.push("Offer name is required. only uppercase and numbers");
    }

    // Discount Percentage Validation
    const discountValue = parseFloat(data.percentage);
    if (isNaN(discountValue) || discountValue <= 0 || discountValue > 100) {
        errors.push("Discount percentage must be a number between 1 and 100.");
    }

    // Maximum Discount Validation (if applicable)
    const maximumDiscount = parseFloat(data.maximumDiscount);
    if (maximumDiscount && maximumDiscount <= 500) {
        errors.push("Maximum discount must be a positive number.");
    }

    // Valid From Date Validation
    const validFromDate = new Date(data.validFrom)
    const today = new Date();
    console.log(data.validFromDate,today)
    if (!data.validFrom || validFromDate <= today) {
        errors.push("Valid From date must be today or a future date.");
    }

    // Valid Until Date Validation
    const validUntilDate = new Date(data.validUntil);
    if (!data.validUntil || validUntilDate <= validFromDate) {
        errors.push("Valid Until date must be later than the Valid From date.");
    }

    // Apply To Validation based on Offer Type
    if (data.offerType === 'product' && !data.appliedToProduct) {
        errors.push("You must select a product to apply the offer to.");
    }

    if (data.offerType === 'category' && !data.appliedToCategory) {
        errors.push("You must select a category to apply the offer to.");
    }

    // Referral Code Validation (if applicable)
    if (data.offerType === 'referral' && (!data.referralCode || data.referralCode.trim() === '')) {
        errors.push("Referral code is required for referral offers.");
    }

    // Display errors if any
    if (errors.length > 0) {
        errorContainer.innerHTML = errors.map(error => `<p>${error}</p>`).join('');
        errorContainer.style.display = 'block';
        return; // Stop form submission if validation fails
    }

      try {
        const response = await fetch(e.target.action, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(data),
        });

        const result = await response.json();

        console.log("Response Status:", response.status);
        console.log("Response Data:", result);

        if (response.ok) {
          Swal.fire({
            icon: 'success',
            title: 'Success',
            text: result.message || 'Offer saved successfully!',
          }).then(() => location.reload());
        } else {
          Swal.fire({
            icon: 'error',
            title: 'Error',
            text: result.message || 'Failed to save offer.',
          });
        }
      } catch (error) {
        console.error("Error saving offer:", error);
        Swal.fire({
          icon: 'error',
          title: 'Error',
          text: 'An unexpected error occurred. Please try again.',
        });
      }
    });
  </script>


<script>
    // Edit offer
    async function populateOffer(offerId) {
      try {
        console.log('offerId', offerId);
    
        // Fetch offer data using the offerId
        let response = await fetch(`/admin/getOffer/${offerId}`);
        const data = await response.json();
        console.log(data, "Offer Data after fetching");
    
        const { offerData } = data;
    
        // Pre-fill the form fields with the fetched data
        document.getElementById('editOfferType').value = offerData.offerType;
        document.getElementById('editOfferName').value = offerData.offerName;
        document.getElementById('editPercentage').value = offerData.percentage;
        document.getElementById('editMaximumDiscount').value = offerData.maximumDiscount || '';
        document.getElementById('editValidFrom').value = new Date(offerData.validFrom).toISOString().split('T')[0];
        document.getElementById('editValidUntil').value = new Date(offerData.validUntil).toISOString().split('T')[0];
    
        // Show the appropriate field based on offerType
        if (offerData.offerType === 'product') {
          document.getElementById('editAppliedToField').style.display = 'block';
          document.getElementById('editAppliedToCategoryField').style.display = 'none';
          document.getElementById('editAppliedToProduct').value = offerData.appliedToProduct; // Pre-select the product
        } else if (offerData.offerType === 'category') {
          document.getElementById('editAppliedToField').style.display = 'none';
          document.getElementById('editAppliedToCategoryField').style.display = 'block';
          document.getElementById('editAppliedToCategory').value = offerData.appliedToCategory; // Pre-select category
        }
    
        // Enable or disable fields based on offer type
        const offerTypeField = document.getElementById('editOfferType');
        offerTypeField.dispatchEvent(new Event('change'));
    
        // Handle form submission for editing the offer
        document.getElementById('editOfferForm').addEventListener('submit', async (e) => {
          e.preventDefault();
          const errorContainer = document.getElementById('editErrorContainer');
          errorContainer.innerHTML = ''; // Clear previous errors
          const errors = [];
    
          const formData = new FormData(e.target);
          const data = Object.fromEntries(formData.entries());
          console.log("=======>",data)
          // Validation
          if (data.percentage && (parseFloat(data.percentage) <= 0 || parseFloat(data.percentage) > 100)) {
            errors.push("Discount percentage must be between 0 and 100.");
          }
    
          if (data.maximumDiscount && parseFloat(data.maximumDiscount) < 500) {
            errors.push("Maximum discount must be a positive number.");
          }
    
          const today = new Date();
          const validFromDate = new Date(data.validFrom);
          const validUntilDate = new Date(data.validUntil);
    
          if (validFromDate < today) {
            errors.push("Valid From date must be today or in the future.");
          }
    
          if (validUntilDate <= validFromDate) {
            errors.push("Valid Until date must be after Valid From date.");
          }
    
          if (errors.length > 0) {
            errorContainer.innerHTML = errors.map((error) => `<p>${error}</p>`).join('');
            errorContainer.style.display = 'block';
            return;
          }
     
         
          // If validation passes, submit the form data to edit the offer
          try {
            const response = await fetch(`/admin/editOffer/${offerId}`, {
              method: 'PUT',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({data}),
            });
    
            const result = await response.json();
            if (response.ok) {
              swal.fire({
                icon: 'success',
                title: 'Success',
                text: result.message || 'Offer edited successfully.',
              }).then(() => location.reload());
            } else {
              swal.fire({
                icon: 'error',
                title: 'Failed',
                text: result.message || 'Could not edit offer.',
              });
            }
          } catch (error) {
            swal.fire({
              icon: 'error',
              title: 'Failed',
              text: 'Something went wrong.',
            });
          }
        });
      } catch (error) {
        console.log('Error populating offer data:', error);
      }
    }
    </script>
    
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>

</body>
</html>
