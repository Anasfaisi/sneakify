
<!-- products.ejs -->
<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Product Management</title>
  <!-- Custom CSS -->
  <style>
    .sidebar {
      background-color: #f8f9fa;
      min-height: 100vh;
      padding: 20px;
      border-right: 1px solid #dee2e6;
    }

    .sidebar-link {
      display: flex;
      align-items: center;
      padding: 10px;
      color: #0d6efd;
      text-decoration: none;
      border-radius: 5px;
      margin-bottom: 5px;
    }

    .sidebar-link:hover {
      background-color: #e9ecef;
    }

    .sidebar-link i {
      margin-right: 10px;
    }

    .table-container {
      padding: 20px;
    }

    .product-image {
      width: 50px;
      height: 50px;
      object-fit: cover;
    }

    .content-area {
      flex-grow: 1;
      padding: 20px;
    }
    .pagination {
  display: flex;
  justify-content: center;
  margin-top: 20px;
}

.page-item {
  margin: 0 5px;
}

.page-link {
  display: inline-block;
  padding: 10px 15px;
  color: #007bff;
  background-color: #fff;
  border: 1px solid #ccc;
  border-radius: 5px;
  text-decoration: none;
  font-weight: bold;
  transition: background-color 0.2s ease, color 0.2s ease;
}

.page-link:hover {
  background-color: #007bff;
  color: #fff;
}

.page-item.active .page-link {
  background-color: #007bff;
  color: #fff;
}

.page-item.disabled .page-link {
  color: #ddd;
  pointer-events: none;
}

.page-item a {
  text-align: center;
  line-height: 1;
}

/* Add spacing between the items */
.page-item:not(.disabled):not(.active) .page-link {
  cursor: pointer;
}

.page-item a:hover {
  color: #fff;
  text-decoration: none;
}

  </style>
  <!-- Font Awesome for icons -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.css" />
  <script                 src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.js" defer></script> 
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">

  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
  <!-- Bootstrap CSS -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

</head>

<body>
  <%-include("partials/sidebar") %>

  <!-- Main Content -->
  <div class="col-md-10 content-area">
    <h1 class="mb-4">Product Management</h1>
    <button class="btn btn-primary mb-3" data-bs-toggle="modal" data-bs-target="#addProductModal">
      <i class="fas fa-plus"></i> Add New Product
    </button>
    <header class="bg-white shadow-sm">
      <div class="d-flex justify-content-between align-items-center px-4 py-3 border-bottom">
        <h1 class="fs-5 fw-semibold">Orders</h1>
      </div>
    </header>
    <!-- Products Table -->
    <div class="table-responsive">
      <table class="table table-bordered">
        <thead class="table-light">
          <tr>
            <th>Name</th>
            <th>Image</th>
            <th>Description</th>
            <th>Price</th>
            <th>Sizes & stock</th>
            <th>Category</th>
            <th>Active</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody>
          <% if (products.length> 0) { %>
          <% products.forEach(product=> { %>
          <tr>
            <td>
              <%= product.name %>
            </td>
            <td>
              <img src="/<%= product.images[0] %>" alt="Product Image" class="product-image">
            </td>
            <td>
              <%= product.description %>
            </td>
            <td>â‚¹<%= product.price.toFixed(2) %>
            </td>
            <td>
                  <select class="form-select">
                    <% product.sizes.forEach(size => { %>
                      <option value="<%= size.size %>">
                        <%= size.size %> - <%= size.stock %> in stock
                      </option>
                    <% }) %>
                  </select>
                  </td>
            <td>
              <%= product.category %>
            </td>

            <td>

              <button id="listButton-<%= product._id %>" data-product-id="<%= product._id %>" class="btn <%= product.isActive ? 'btn-danger' : 'btn-success' %>">
                <%= product.isActive ? 'UnList' : 'List' %>
              </button>

            </td>
            <td>
           <a class="btn btn-sm btn-primary me-1" href="/admin/editProduct/<%= product._id %>">
  <i class="fas fa-edit"></i>
</a>
            
            </td>
          </tr>
          <% }) %>
          <% } else { %>
          <tr>
            <td colspan="8" class="text-center">No products available</td>
          </tr>
          <% } %>
        </tbody>
      </table>
    </div>

    <!-- Add Product Modal -->
    <div class="modal fade" id="addProductModal" tabindex="-1" aria-labelledby="addProductModalLabel" aria-hidden="true">
      <div class="modal-dialog">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="addProductModalLabel">Add New Product</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <form id="addProductForm" enctype="multipart/form-data">
            <div class="modal-body">
              <div class="mb-3">
                <label for="name" class="form-label">Name</label>
                <input type="text" class="form-control" id="name" name="name" required>
              </div>
              <div class="mb-3">
                <label for="description" class="form-label">Description</label>
                <textarea class="form-control" id="description" name="description" required></textarea>
              </div>
              <div class="mb-3">
                <label for="sizeStockContainer" class="form-label">Sizes and Stock</label>
                <div id="sizeStockContainer" class="size-stock-wrapper">
                  <!-- Initial Size-Stock Pair -->
                  <div class="row align-items-center size-stock-row mb-3">
                    <div class="col-5">
                      <input type="number" class="form-control size-input" name="size[]" min="5" max="12" placeholder="Enter size" required />
                    </div>
                    <div class="col-5">
                      <input type="number" class="form-control stock-input" name="stock[]"   placeholder="Enter stock" min="1" required />
                    </div>
                    <div class="col-2">
                      <button type="button" class="btn btn-success add-stock-btn">
                        <i class="fas fa-plus"></i>
                      </button>
                    </div>
                  </div>
                </div>
              </div>
              
              <div class="mb-3">
                <label for="price" class="form-label">Price</label>
                <input type="number" class="form-control" id="price" name="price" step="0.01" min="0" required>
              </div>
              <div class="mb-3">
                <label for="category" class="form-label">Category</label>
                <select class="form-control" id="category" name="category" required>
                  <option value="">Select Category</option>
                  <% categories.forEach((category)=> { %>
                  <option>
                    <%= category.name %>
                  </option>
                  <% }) %>
                </select>
              </div>
              <div class="mb-3">
                <label for="imageInput1" class="form-label">Upload Product Image (3 images allowed ) </label>
                <input type="file" multiple class="form-control" id="imageInput" required>
                <!-- Cropper Container -->
                <div id="cropContainer" style="display: none;">
                  <img id="cropImage" style="max-width: 100%; max-height: 400px;" />
                  <button type="button" id="cropButton">Crop</button>
                  <button type="button" id="skipButton">Skip</button>
                  <button type="button" id="closeCropperButton">Close Cropper</button>
                </div>
                <input type="file" id="croppedImages" multiple hidden required>
                <div id="croppedImageContainer"></div>
              </div>


              <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="submit" class="btn btn-primary">Add Product</button>
              </div>
          </form>
        </div>
      </div>
    </div>
  </div>
  <div class="pagination">
    <% if (currentPage > 1) { %>
      <div class="page-item">
        <a href="/admin/products?page=<%= currentPage - 1 %>" class="page-link">Previous</a>
      </div>
    <% } else { %>
      <div class="page-item disabled">
        <span class="page-link">Previous</span>
      </div>
    <% } %>
  
    <% for (let i = 1; i <= totalPages; i++) { %>
      <div class="page-item <%= currentPage === i ? 'active' : '' %>">
        <a href="/admin/products?page=<%= i %>" class="page-link"><%= i %></a>
      </div>
    <% } %>
  
    <% if (currentPage < totalPages) { %>
      <div class="page-item">
        <a href="/admin/products?page=<%= currentPage + 1 %>" class="page-link">Next</a>
      </div>
    <% } else { %>
      <div class="page-item disabled">
        <span class="page-link">Next</span>
      </div>
    <% } %>
  </div>
  

 

  <script>
    //add image
    const imageInput = document.getElementById('imageInput');
    const cropContainer = document.getElementById('cropContainer');
    const cropImage = document.getElementById('cropImage');
    const cropButton = document.getElementById('cropButton');
    const skipButton = document.getElementById('skipButton');
    const closeCropperButton = document.getElementById('closeCropperButton');
    const croppedImageContainer = document.getElementById('croppedImageContainer');
    const croppedImagesInput = document.getElementById('croppedImages');
    let cropper;
    let imageQueue = [];
    let currentImageIndex = -1;
    let croppedFiles = []; // Array to store cropped files

    const loadImageToCropper = () => {

      if (currentImageIndex >= 0 && currentImageIndex < imageQueue.length) {
        const file = imageQueue[currentImageIndex];
        const reader = new FileReader();
        reader.onload = (e) => {
          cropImage.src = e.target.result;

          // Initialize or reset Cropper.js
          if (cropper) {
            cropper.destroy();
          }
          cropper = new Cropper(cropImage, {
            aspectRatio: 1, // Adjust as needed
            viewMode: 2,
          });

          cropContainer.style.display = 'block';
        };
        reader.readAsDataURL(file);
      } else {
        cropContainer.style.display = 'none'; 
        if (cropper) {
          cropper.destroy();
          cropper = null;
        }
      }
    };

    const dataURLtoFile = (dataurl, filename) => {
      const arr = dataurl.split(',');
      const mime = arr[0].match(/:(.*?);/)[1];
      const bstr = atob(arr[1]);
      let n = bstr.length;
      const u8arr = new Uint8Array(n);
      while (n--) {
        u8arr[n] = bstr.charCodeAt(n);
      }
      return new File([u8arr], filename, {
        type: mime
      });
    };


// Add this validation function
imageInput.addEventListener('change', function(e) {
    const files = e.target.files;
    const validImageTypes = ['image/jpeg', 'image/png', 'image/gif', 'image/webp'];
    
    // Clear previous queue
    imageQueue = [];
    
    // Validate each file
    for (let file of files) {
        if (!validImageTypes.includes(file.type)) {
            Swal.fire({
                icon: 'error',
                title: 'Invalid File Type',
                text: 'Please upload only image files (JPEG, PNG, GIF, WEBP)'
            });
            // Clear the input
            e.target.value = '';
            return;
        }
        imageQueue.push(file);
    }
    
    // If all files are valid, proceed with cropping
    if (imageQueue.length > 0) {
        currentImageIndex = 0;
        loadImageToCropper();
    }
});

    cropButton.addEventListener('click', () => {
      if (cropper) {
        const croppedCanvas = cropper.getCroppedCanvas();
        const croppedImageDataURL = croppedCanvas.toDataURL('image/png');

        // Create and display the cropped image
        const croppedImg = document.createElement('img');
        croppedImg.src = croppedImageDataURL;
        croppedImg.style.maxWidth = '200px'; // Adjust size if needed
        croppedImg.style.margin = '10px';
        croppedImageContainer.appendChild(croppedImg);

        // Convert dataURL to File object and add to croppedFiles array
        const croppedFile = dataURLtoFile(
          croppedImageDataURL,
          `cropped-image-${currentImageIndex + 1}.png`
        );
        croppedFiles.push(croppedFile);

        // Update the hidden input's files property
        const dataTransfer = new DataTransfer();
        croppedFiles.forEach((file) => dataTransfer.items.add(file));
        croppedImagesInput.files = dataTransfer.files;

        // Move to the next image
        currentImageIndex++;
        loadImageToCropper();
      }
    });

    skipButton.addEventListener('click', () => {
      currentImageIndex++;
      loadImageToCropper(); // Skip to the next image
    });

    closeCropperButton.addEventListener('click', () => {
      cropContainer.style.display = 'none';
      if (cropper) {
        cropper.destroy();
        cropper = null;
      }
      imageQueue = [];
      currentImageIndex = -1; // Reset the queue
    });
  </script>

<script>
  //stock and size
 document.addEventListener("DOMContentLoaded", () => {
  const sizeStockContainer = document.getElementById("sizeStockContainer");

  // Event delegation for add and remove actions
  sizeStockContainer.addEventListener("click", (e) => {
    if (e.target.closest(".add-stock-btn")) {
      console.log("plus button clicked");
      // Add a new size-stock pair
      const newPair = document.createElement("div");
      newPair.className = "row align-items-center size-stock-pair mb-2";
      newPair.innerHTML = `
        <div class="col-md-5">
          <input type="text" class="form-control" name="size[]" max="12" placeholder="Enter size" min="5" required />
        </div>
        <div class="col-md-5">
          <input type="number" class="form-control" name="stock[]" placeholder="Enter stock" min="1" required />
        </div>
        <div class="col-md-2">
          <button type="button" class="btn btn-danger remove-size-stock">
            <i class="fas fa-minus"></i>
          </button>
        </div>
      `;
      sizeStockContainer.appendChild(newPair);
    } else if (e.target.closest(".remove-size-stock")) {
      console.log("minus button clicked");
      // Remove the size-stock row
      const pair = e.target.closest(".size-stock-pair");
      sizeStockContainer.removeChild(pair);
    }
  });
});

</script>


  <script>
  // Add Product
const addProductForm = document.getElementById('addProductForm');
const sizeStockContainer = document.getElementById('sizeStockContainer');

addProductForm.addEventListener('submit', (e) => {
  e.preventDefault();

  // Create a FormData object
  const formData = new FormData(addProductForm);

  // Collect sizes and stocks into an array of objects
  const sizes = [];
  const sizeInputs = document.querySelectorAll("input[name='size[]']");
  const stockInputs = document.querySelectorAll("input[name='stock[]']");

  sizeInputs.forEach((sizeInput, index) => {
    const sizeValue = sizeInput.value.trim();
    const stockValue = stockInputs[index].value.trim();

    if (sizeValue && stockValue) {
      sizes.push({ size: sizeValue, stock: parseInt(stockValue, 10) });
    }
  });
  console.log("the things inside in sizes array is ",sizes);

  if (sizes.length === 0) {
    alert('Please add at least one valid size-stock pair.');
    return;
  }

  // Append sizes array as a JSON string to FormData
  formData.append('sizes', JSON.stringify(sizes));

  // Append cropped images from the hidden input to the FormData
  const croppedFiles = croppedImagesInput.files;
  for (let i = 0; i < croppedFiles.length; i++) {
    if(croppedFiles.length < 3){
    return swal.fire({
        icon:"warning",
        title:"error",
        text:"minimum 3 images are needed"
      })
    }
    formData.append('croppedImages', croppedFiles[i]);
  }

  // Log FormData keys and values for testing
  for (let [key, value] of formData.entries()) {
    console.log(`${key}:`, value);
  }

  // Send the form data via fetch
  fetch('/admin/products/add', {
      method: 'POST',
      body: formData,
    })
    .then((response) => response.json())
    .then((data) => {
      if (data.success) {
        Swal.fire({
        title: 'Success!',
        text: data.message || 'Product added successfully!',
        icon: 'success',
        confirmButtonText: 'OK',
      }).then(() => {
        location.reload(); 
      }); // Refresh the page
      } else {
        Swal.fire({
        title: 'Error',
        text: data.message  || 'Failed to add product.',
        icon: 'error',
        confirmButtonText: 'Try Again',
      }).then(()=>location.reload())
      }
    })
    .catch((error) => {
      Swal.fire({
      title: 'Oops!',
      text: 'Something went wrong. Please try again later.',
      icon: 'error',
      confirmButtonText: 'OK',
    }).then(()=>location.reload())
    console.error('Error:', error);
    });
});

  </script>

  <script>
    // list and unlist
    document.addEventListener('DOMContentLoaded', () => {

      const buttons = document.querySelectorAll('[id^="listButton-"]');

      buttons.forEach(button => {
        button.addEventListener('click', async (event) => {
          event.preventDefault();
          const productId = button.getAttribute('data-product-id');
          const action = button.classList.contains('btn-success') ? 'list' : 'unList';

          // SweetAlert2 to confirm action
          Swal.fire({
            title: `Are you sure you want to ${action === 'list' ? 'list' : 'unlist'} this product?`,
            text: "This action cannot be undone!",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonText: `Yes, ${action === 'list' ? 'List' : 'Unlist'} it!`,
            cancelButtonText: 'No, cancel!',
          }).then(async (result) => {
            if (result.isConfirmed) {
              // Send fetch request to backend to toggle product status
              try {
                const response = await fetch(`/admin/products/${productId}/${action}`, {
                  method: 'PATCH',
                  headers: {
                    'Content-Type': 'application/json',
                  },
                });

                const resultData = await response.json();
                console.log(resultData);
                if (response.ok) {
                  // Toastify to show success message
                  Toastify({
                    text: resultData.message,
                    duration: 1500,
                    backgroundColor: "green",
                  }).showToast();
                  setTimeout(() => {
                    location.reload();
                  }, 1000)
                } else {
                  // Toastify for error message
                  Toastify({
                    text: resultData.message || 'Something went wrong',
                    duration: 3000,
                    backgroundColor: "red",
                  }).showToast();
                }
              } catch (error) {
                console.error('Error:', error);
                Toastify({
                  text: 'Error while processing request',
                  duration: 3000,
                  backgroundColor: "red",
                }).showToast();
              }
            } else {
              // User canceled the action
              Toastify({
                text: 'Action canceled',
                duration: 3000,
                backgroundColor: "orange",
              }).showToast();
            }
          });
        });
      });
    });
  </script>

  <!-- Bootstrap JS and dependencies -->
  <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.10.2/dist/umd/popper.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.min.js"></script>

  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <script src="https://cdn.jsdelivr.net/npm/toastify-js"></script>
</body>

</html>

<!-- Bootstrap JS -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.min.js"></script>
</body>

</html>